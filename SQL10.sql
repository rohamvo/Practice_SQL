/*
DEVELOPERS 테이블에서 Front End 스킬을 가진 개발자의 정보를 조회하려 합니다. 
조건에 맞는 개발자의 ID, 이메일, 이름, 성을 조회하는 SQL 문을 작성해 주세요.
결과는 ID를 기준으로 오름차순 정렬해 주세요.
*/
WITH S AS 
(SELECT SUM(CODE) AS F FROM SKILLCODES WHERE CATEGORY = 'Front End')

SELECT ID, EMAIL, FIRST_NAME, LAST_NAME
FROM DEVELOPERS AS D, S
WHERE D.SKILL_CODE & S.F
ORDER BY ID;

/*
CAR_RENTAL_COMPANY_CAR 테이블과 CAR_RENTAL_COMPANY_RENTAL_HISTORY 테이블과 CAR_RENTAL_COMPANY_DISCOUNT_PLAN 테이블에서 자동차 종류가 '세단' 또는 'SUV' 인 자동차 중 2022년 11월 1일부터 2022년 11월 30일까지 대여 가능하고 30일간의 대여 금액이 50만원 이상 200만원 미만인 자동차에 대해서 자동차 ID, 자동차 종류, 대여 금액(컬럼명: FEE) 리스트를 출력하는 SQL문을 작성해주세요. 
결과는 대여 금액을 기준으로 내림차순 정렬하고, 대여 금액이 같은 경우 자동차 종류를 기준으로 오름차순 정렬, 자동차 종류까지 같은 경우 자동차 ID를 기준으로 내림차순 정렬해주세요.
*/
WITH P AS (SELECT CAR_TYPE, (DISCOUNT_RATE * 0.01) AS DISCOUNT_RATE
FROM CAR_RENTAL_COMPANY_DISCOUNT_PLAN
WHERE (CAR_TYPE IN ('세단', 'SUV')) AND DURATION_TYPE = '30일 이상'),

H AS (
SELECT DISTINCT(CAR_ID)
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY AS C
WHERE NOT EXISTS (
SELECT 1
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY AS R
WHERE R.CAR_ID = C.CAR_ID
AND R.START_DATE <= '2022-11-30'
AND R.END_DATE >= '2022-11-01')
)

SELECT *
FROM (SELECT CAR_ID, T.CAR_TYPE, ROUND((DAILY_FEE - (DAILY_FEE * DISCOUNT_RATE)) * 30) AS FEE
FROM P JOIN (SELECT C.CAR_ID, C.CAR_TYPE, C.DAILY_FEE
FROM CAR_RENTAL_COMPANY_CAR AS C
JOIN H ON C.CAR_ID = H.CAR_ID) AS T
ON P.CAR_TYPE = T.CAR_TYPE) AS F
WHERE FEE >= 500000 AND FEE < 2000000
ORDER BY FEE DESC, CAR_TYPE ASC, CAR_ID DESC;

/*
CAR_RENTAL_COMPANY_CAR 테이블과 CAR_RENTAL_COMPANY_RENTAL_HISTORY 테이블과 CAR_RENTAL_COMPANY_DISCOUNT_PLAN 테이블에서 자동차 종류가 '트럭'인 자동차의 대여 기록에 대해서 대여 기록 별로 대여 금액(컬럼명: FEE)을 구하여 대여 기록 ID와 대여 금액 리스트를 출력하는 SQL문을 작성해주세요. 
결과는 대여 금액을 기준으로 내림차순 정렬하고, 대여 금액이 같은 경우 대여 기록 ID를 기준으로 내림차순 정렬해주세요.
*/
WITH 
    DC AS (SELECT DURATION_TYPE, (DISCOUNT_RATE * 0.01) AS DR
           FROM CAR_RENTAL_COMPANY_DISCOUNT_PLAN
           WHERE CAR_TYPE = '트럭'),
    F AS (SELECT CAR_ID, DAILY_FEE 
          FROM CAR_RENTAL_COMPANY_CAR
          WHERE CAR_TYPE = '트럭'), 
    TD AS (SELECT HISTORY_ID, CAR_ID, DATEDIFF(END_DATE, START_DATE) + 1 AS T 
           FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY 
           WHERE CAR_ID IN 
           (SELECT CAR_ID FROM CAR_RENTAL_COMPANY_CAR WHERE CAR_TYPE = '트럭'))
           
SELECT HISTORY_ID, CASE
WHEN T < 7 THEN DAILY_FEE * T
WHEN T >= 7 AND T < 30 
THEN ROUND((DAILY_FEE - (DAILY_FEE * (SELECT DR FROM DC WHERE DURATION_TYPE = '7일 이상'))) * T)
WHEN T >= 30 AND T < 90 
THEN ROUND((DAILY_FEE - (DAILY_FEE * (SELECT DR FROM DC WHERE DURATION_TYPE = '30일 이상'))) * T)
ELSE ROUND((DAILY_FEE - (DAILY_FEE * (SELECT DR FROM DC WHERE DURATION_TYPE = '90일 이상'))) * T)
END AS FEE
FROM TD JOIN F
ON TD.CAR_ID = F.CAR_ID
ORDER BY FEE DESC, HISTORY_ID DESC;

/*
2022년 1월의 도서 판매 데이터를 기준으로 저자 별, 카테고리 별 매출액(TOTAL_SALES = 판매량 * 판매가) 을 구하여, 저자 ID(AUTHOR_ID), 저자명(AUTHOR_NAME), 카테고리(CATEGORY), 매출액(SALES) 리스트를 출력하는 SQL문을 작성해주세요.
결과는 저자 ID를 오름차순으로, 저자 ID가 같다면 카테고리를 내림차순 정렬해주세요.
*/
WITH S AS (SELECT BOOK_ID, SUM(SALES) AS TOTAL FROM BOOK_SALES WHERE SALES_DATE LIKE '2022-01%' GROUP BY BOOK_ID)

SELECT AUTHOR_ID, AUTHOR_NAME, CATEGORY, SUM(TOTAL_SALES) AS TOTAL_SALES
FROM (SELECT AUTHOR_ID, AUTHOR_NAME, CATEGORY, (PRICE * TOTAL) AS TOTAL_SALES
FROM (SELECT B.BOOK_ID, B.AUTHOR_ID, A.AUTHOR_NAME, B.CATEGORY, B.PRICE
FROM BOOK AS B 
JOIN AUTHOR AS A ON B.AUTHOR_ID = A.AUTHOR_ID) AS AB
JOIN S ON AB.BOOK_ID = S.BOOK_ID) T
GROUP BY AUTHOR_ID, CATEGORY
ORDER BY AUTHOR_ID ASC, CATEGORY DESC;

/*
PATIENT, DOCTOR 그리고 APPOINTMENT 테이블에서 2022년 4월 13일 취소되지 않은 흉부외과(CS) 진료 예약 내역을 조회하는 SQL문을 작성해주세요. 
진료예약번호, 환자이름, 환자번호, 진료과코드, 의사이름, 진료예약일시 항목이 출력되도록 작성해주세요. 결과는 진료예약일시를 기준으로 오름차순 정렬해주세요.
*/
WITH 
    PT AS (SELECT PT_NO, PT_NAME FROM PATIENT),
    DOC AS (SELECT DR_NAME, DR_ID FROM DOCTOR WHERE MCDP_CD = 'CS'),
    AP AS (SELECT APNT_NO, PT_NO, MCDP_CD, APNT_YMD, MDDR_ID 
           FROM APPOINTMENT 
           WHERE MCDP_CD = 'CS' AND APNT_YMD LIKE '2022-04-13%' AND APNT_CNCL_YN = 'N')

SELECT APNT_NO, PT_NAME, PT.PT_NO, MCDP_CD, DR_NAME, APNT_YMD
FROM (SELECT APNT_NO, PT_NO, MCDP_CD, DR_NAME, APNT_YMD
FROM AP JOIN DOC ON AP.MDDR_ID = DOC.DR_ID) AS DOC_AP
JOIN PT ON DOC_AP.PT_NO = PT.PT_NO
ORDER BY APNT_YMD;