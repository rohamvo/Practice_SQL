/*
USER_INFO 테이블과 ONLINE_SALE 테이블에서 년, 월, 성별 별로 상품을 구매한 회원수를 집계하는 SQL문을 작성해주세요. 결과는 년, 월, 성별을 기준으로 오름차순 정렬해주세요. 
이때, 성별 정보가 없는 경우 결과에서 제외해주세요.
*/
SELECT YEAR(SALES_DATE) AS YEAR, MONTH(SALES_DATE) AS MONTH, GENDER, COUNT(DISTINCT(S.USER_ID)) AS USERS
FROM (SELECT USER_ID, SALES_DATE FROM ONLINE_SALE) AS S 
JOIN (SELECT USER_ID, GENDER FROM USER_INFO) AS I
ON S.USER_ID = I.USER_ID
WHERE GENDER IS NOT NULL
GROUP BY YEAR(SALES_DATE), MONTH(SALES_DATE), GENDER
ORDER BY YEAR, MONTH, GENDER;

/*
MEMBER_PROFILE와 REST_REVIEW 테이블에서 리뷰를 가장 많이 작성한 회원의 리뷰들을 조회하는 SQL문을 작성해주세요. 
회원 이름, 리뷰 텍스트, 리뷰 작성일이 출력되도록 작성해주시고, 결과는 리뷰 작성일을 기준으로 오름차순, 리뷰 작성일이 같다면 리뷰 텍스트를 기준으로 오름차순 정렬해주세요.
*/
WITH M AS 
(SELECT COUNT(*) AS M_CNT FROM REST_REVIEW GROUP BY MEMBER_ID ORDER BY M_CNT DESC LIMIT 1)

SELECT MEMBER_NAME, REVIEW_TEXT, DATE_FORMAT(REVIEW_DATE, '%Y-%m-%d') AS REVIEW_DATE
FROM (SELECT MEMBER_ID, REVIEW_TEXT, REVIEW_DATE
FROM REST_REVIEW
WHERE MEMBER_ID IN 
(SELECT R.MEMBER_ID
 FROM (SELECT MEMBER_ID, REVIEW_TEXT, COUNT(*) AS CNT, REVIEW_DATE FROM REST_REVIEW  GROUP BY MEMBER_ID) AS R 
 WHERE R.CNT = (SELECT M_CNT FROM M))) AS T 
JOIN MEMBER_PROFILE AS P ON T.MEMBER_ID = P.MEMBER_ID
ORDER BY REVIEW_DATE, REVIEW_TEXT;

/*
REST_INFO와 REST_REVIEW 테이블에서 서울에 위치한 식당들의 식당 ID, 식당 이름, 음식 종류, 즐겨찾기수, 주소, 리뷰 평균 점수를 조회하는 SQL문을 작성해주세요. 
이때 리뷰 평균점수는 소수점 세 번째 자리에서 반올림 해주시고 결과는 평균점수를 기준으로 내림차순 정렬해주시고, 평균점수가 같다면 즐겨찾기수를 기준으로 내림차순 정렬해주세요.
*/
WITH 
    S AS
    (SELECT REST_ID, ROUND(AVG(REVIEW_SCORE),2) AS SCORE FROM REST_REVIEW GROUP BY REST_ID),
    F AS
    (SELECT REST_ID, REST_NAME, FOOD_TYPE, ADDRESS, SUM(FAVORITES) AS FAVORITES FROM REST_INFO WHERE ADDRESS LIKE '서울%' GROUP BY REST_ID)
    
SELECT S.REST_ID, REST_NAME, FOOD_TYPE, FAVORITES, ADDRESS, SCORE
FROM S JOIN F ON S.REST_ID = F.REST_ID
ORDER BY SCORE DESC, FAVORITES DESC;

/*
FOOD_PRODUCT와 FOOD_ORDER 테이블에서 생산일자가 2022년 5월인 식품들의 식품 ID, 식품 이름, 총매출을 조회하는 SQL문을 작성해주세요. 
이때 결과는 총매출을 기준으로 내림차순 정렬해주시고 총매출이 같다면 식품 ID를 기준으로 오름차순 정렬해주세요.
*/
WITH
    M AS
    (SELECT PRODUCT_ID, SUM(AMOUNT) AS AMOUNT FROM FOOD_ORDER WHERE PRODUCE_DATE LIKE '2022-05%' GROUP BY PRODUCT_ID),
    P AS
    (SELECT PRODUCT_ID, PRODUCT_NAME, PRICE FROM FOOD_PRODUCT)

SELECT M.PRODUCT_ID, PRODUCT_NAME, (AMOUNT * PRICE) AS TOTAL_SALES
FROM M JOIN P ON M.PRODUCT_ID = P.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, PRODUCT_ID ASC;

/*
FOOD_PRODUCT 테이블에서 식품분류별로 가격이 제일 비싼 식품의 분류, 가격, 이름을 조회하는 SQL문을 작성해주세요. 
이때 식품분류가 '과자', '국', '김치', '식용유'인 경우만 출력시켜 주시고 결과는 식품 가격을 기준으로 내림차순 정렬해주세요.
*/
SELECT CATEGORY, PRICE AS MAX_PRICE, PRODUCT_NAME
FROM (SELECT *, DENSE_RANK() OVER(PARTITION BY CATEGORY ORDER BY PRICE DESC) AS R 
FROM FOOD_PRODUCT) AS FR
WHERE FR.R = 1 AND CATEGORY IN ('과자', '국', '김치', '식용유')
ORDER BY MAX_PRICE DESC;

/*
데이터 분석 팀에서는 우유(Milk)와 요거트(Yogurt)를 동시에 구입한 장바구니가 있는지 알아보려 합니다. 
우유와 요거트를 동시에 구입한 장바구니의 아이디를 조회하는 SQL 문을 작성해주세요. 
이때 결과는 장바구니의 아이디 순으로 나와야 합니다.
*/
SELECT CART_ID
FROM CART_PRODUCTS
WHERE NAME = 'Milk'
INTERSECT
SELECT CART_ID
FROM CART_PRODUCTS
WHERE NAME = 'Yogurt'
ORDER BY CART_ID

/*
보호소에서는 몇 시에 입양이 가장 활발하게 일어나는지 알아보려 합니다. 
0시부터 23시까지, 각 시간대별로 입양이 몇 건이나 발생했는지 조회하는 SQL문을 작성해주세요. 
이때 결과는 시간대 순으로 정렬해야 합니다.
*/
WITH RECURSIVE
    HOURS AS (SELECT 0 AS HOUR UNION ALL SELECT HOUR + 1 FROM HOURS WHERE HOUR < 23),
    C AS (SELECT H, COUNT(*) AS CNT FROM (SELECT HOUR(DATETIME) AS H FROM ANIMAL_OUTS) AS O GROUP BY H)
    
SELECT HOUR, 
CASE WHEN CNT IS NULL THEN 0
ELSE CNT
END AS COUNT
FROM HOURS
LEFT JOIN C
ON HOURS.HOUR = C.H