/*
# 그룹 함수
# 데이터를 GROUP BY 하여 나타낼 수 있는 데이터를 구하는 함수이다.
# 집계 함수 : COUNT, SUM, AVG, MAX, MIN 등
# 소계(총계) 함수 : ROLLUP, CUBE, GROUPING SETS등

# ROLLUP : 소그룹 간의 소계 및 총계를 계산하는 함수이다.
# ROLLUP(A) : A로 그룹핑 / 총합계
# ROLLUP(A,B) : A,B로 그룹핑 / A로 그룹핑 / 총합계
# ROLLUP(A,B,C) : A,B,C로 그룹핑 / A,B로 그룹핑 / A로 그룹핑 / 총합계
*/

SELECT * FROM STARBUCKS_ORDER;

--날짜별
SELECT ORDER_DT, COUNT(*) FROM STARBUCKS_ORDER GROUP BY ORDER_DT ORDER BY ORDER_DT;

--주문음료별
SELECT ORDER_ITEM, COUNT(*) FROM STARBUCKS_ORDER GROUP BY ORDER_ITEM ORDER BY COUNT(*) DESC;

--파트너별
SELECT REG_NAME, COUNT(*) FROM STARBUCKS_ORDER GROUP BY REG_NAME ORDER BY COUNT(*) DESC;

SELECT ORDER_DT, COUNT(*) FROM STARBUCKS_ORDER GROUP BY ROLLUP(ORDER_DT) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, COUNT(*) FROM STARBUCKS_ORDER GROUP BY ROLLUP(ORDER_DT, ORDER_ITEM);

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) FROM STARBUCKS_ORDER 
GROUP BY ROLLUP(ORDER_DT, ORDER_ITEM, REG_NAME) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) FROM STARBUCKS_ORDER 
GROUP BY ROLLUP(ORDER_DT, (ORDER_ITEM, REG_NAME)) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) FROM STARBUCKS_ORDER 
GROUP BY ROLLUP(REG_NAME, (ORDER_DT, ORDER_ITEM)) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) FROM STARBUCKS_ORDER 
GROUP BY ROLLUP((ORDER_DT, ORDER_ITEM), REG_NAME) ORDER BY ORDER_DT;

-- CUBE
/*
소그룹 간의 소계 및 총계를 다차원적으로 계산할 수 있는 함수이다. GROUP BY 가 일방향으로
그룹핑하며 소계를 구했다면 CUBE는 조합할 수 있는 모든 그룹에 대한 소계를 집계한다.

CUBE(A) - A로 그룹핑 / 총합계
CUBE(A,B) - A,B로 그룹핑 / A로 그룹핑 / B로 그룹핑 / 총합계
CUBE(A,B,C) - A,B,C로 그룹핑 / A,B로 그룹핑 / A,C로 그룹핑 / B,C로 그룹핑 / A로 그룹핑 / B로 그룹핑 / C로 그룹핑 / 총합계
*/

SELECT ORDER_DT, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY CUBE(ORDER_DT) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY CUBE(ORDER_DT, ORDER_ITEM) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY CUBE(ORDER_DT, ORDER_ITEM, REG_NAME) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY CUBE((ORDER_DT, ORDER_ITEM), REG_NAME) ORDER BY ORDER_DT, ORDER_ITEM, REG_NAME;

SELECT ORDER_DT, ORDER_ITEM, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY CUBE(ORDER_DT, ORDER_ITEM) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY CUBE(ORDER_DT, (ORDER_ITEM, REG_NAME)) ORDER BY ORDER_DT, ORDER_ITEM, REG_NAME;

--GROUPING SETS
/*
특정 항목에 대한 소계를 계산하는 함수이다. 인자값으로 ROLLUP이나 CUBE를 사용할 수도 있다.

GROUPING SETS(A,B) - A로 그룹핑, B로 그룹핑
GROUPING SETS(A,B,()) - A로 그룹핑, B로 그룹핑, 총합계
GROUPING SETS(A, ROLLUP(B)) - A로 그룹핑, B로 그룹핑, 총합계
GROUPING SETS(A, ROLLUP(B,C)) - A로 그룹핑, B,C로 그룹핑, B로 그룹핑, 총합계
GROUPING SETS(A, B, ROLLUP(C)) - A로 그룹핑, B로 그룹핑, C로 그룹핑, 총합계
*/

SELECT ORDER_DT, ORDER_ITEM, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY GROUPING SETS(ORDER_DT, ORDER_ITEM);

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY GROUPING SETS(ORDER_DT, ROLLUP(ORDER_ITEM, REG_NAME)) ORDER BY ORDER_DT;

SELECT ORDER_DT, ORDER_ITEM, REG_NAME, COUNT(*) AS CNT FROM STARBUCKS_ORDER GROUP BY GROUPING SETS(ORDER_DT, CUBE(ORDER_ITEM, REG_NAME)) ORDER BY ORDER_DT;

-- ROLLUP 함수는 인수의 순서에 따라 결과가 달라지며 CUBE 함수와 GROUPING SETS 함수는 인수의 순서가 바뀌어도 같은 결과를 출력한다.

-- GROUPING
/*
GROUPING 함수는 ROLLUP, CUBE, GROUPING SETS 등과 함께 쓰이며 소계를 나타내는 Row를 구분할 수 있게 해준다.
앞서 보여준 예제에서는 소계를 나타내는 Row에서 그룹핑의 기준이 되는 컬럼을 제외하고는 모두 NULL 값으로 표현되었지만
GROUPING 함수를 이용하면 원하는 위치에 원하는 텍스트를 출력할 수 있다.
*/

SELECT ORDER_DT, GROUPING(ORDER_DT), COUNT(*) FROM STARBUCKS_ORDER GROUP BY ROLLUP(ORDER_DT) ORDER BY ORDER_DT;

SELECT CASE GROUPING(ORDER_DT)
        WHEN 1 THEN 'TOTAL' ELSE ORDER_DT
        END AS ORDER_DT,
        COUNT(*)
    FROM STARBUCKS_ORDER
GROUP BY ROLLUP(ORDER_DT)
ORDER BY ORDER_DT;

SELECT DECODE(GROUPING(ORDER_DT), '1', 'TOTAL', ORDER_DT), COUNT(*)
    FROM STARBUCKS_ORDER
GROUP BY ROLLUP(ORDER_DT)
ORDER BY ORDER_DT;

SELECT CASE GROUPING(ORDER_DT)
            WHEN 1 THEN 'ALL DATES' ELSE ORDER_DT
        END AS ORDER_DT,
        CASE GROUPING(ORDER_ITEM)
            WHEN 1 THEN 'ALL ITEMS' ELSE ORDER_ITEM
        END AS ORDER_ITEM,
        COUNT(*)
    FROM STARBUCKS_ORDER
GROUP BY ROLLUP(ORDER_DT, ORDER_ITEM)
ORDER BY ORDER_DT;

-- 윈도우 함수
/*
OVER 키워드와 함께 사용되며 역할에 따라 다음과 같이 나눌 수 있다.
순위 함수 : RANK, DENSE_RANK, ROW_NUMBER
집계 함수 : SUM, MAX, MIN, AVG, COUNT
행 순서 함수 : FIRST_VALUE, LAST_VALUE, LAG, LEAD
비율 함수 : CUME_DIST, PERCENT_RANK, NTILE, RATO_TO_REPORT

*/

-- 순위 함수

-- RANK : 순위를 매기면서 같은 순위가 존재하면 존재하는 수만큼 다음 순위를 건너뛴다.
SELECT ORDER_DT, COUNT(*), RANK() OVER(ORDER BY COUNT(*) DESC) AS RANK
    FROM STARBUCKS_ORDER
GROUP BY ORDER_DT;

-- DENSE_RANK
/*
순위를 매기면서 같은 순위가 존재하더라도 다음 순위를 건너뛰지 않고 이어서 매긴다.
*/
SELECT ORDER_DT, COUNT(*), DENSE_RANK() OVER(ORDER BY COUNT(*) DESC) AS DENSE_RANK
        FROM STARBUCKS_ORDER
    GROUP BY ORDER_DT;

-- ROW_NUMBER
-- 순위를 매기면서 동일한 값이라도 각기 다른 순위를 부여한다.
SELECT ORDER_DT, COUNT(*), ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS R_M
        FROM STARBUCKS_ORDER
    GROUP BY ORDER_DT;

-- 집계 함수

-- SUM 데이터의 합계를 구하는 함수이다. 인자값으로는 숫자형만 올 수 있다.
SELECT SUM(ORDER_NO) AS TOTAL FROM STARBUCKS_ORDER;

-- 누적값
SELECT NO, TITLE, COUNT_DT, DOWNLOAD_CNT,
        SUM(DOWNLOAD_CNT) OVER(ORDER BY NO RANGE BETWEEN 1 PRECEDING AND CURRENT ROW) "누적값"
    FROM SSAK3;

SELECT NO, TITLE, COUNT_DT, DOWNLOAD_CNT,
        SUM(DOWNLOAD_CNT) OVER(ORDER BY NO)
    FROM SSAK3;

SELECT NO, TITLE, COUNT_DT, DOWNLOAD_CNT,
        SUM(DOWNLOAD_CNT) OVER(ORDER BY NO RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FROM SSAK3; 

-- MAX : 데이터의 최대값을 구하는 함수이다.
SELECT MAX(DOWNLOAD_CNT) FROM SSAK3;

SELECT NO, TITLE, DOWNLOAD_CNT, MAX(DOWNLOAD_CNT) OVER (PARTITION BY NO) AS MAX_DOWN FROM SSAK3;

SELECT NO, TITLE, DOWNLOAD_CNT FROM (
    SELECT NO, TITLE, DOWNLOAD_CNT, MAX(DOWNLOAD_CNT) OVER(PARTITION BY NO) AS MAX_DOWN
    FROM SSAK3
)
    WHERE DOWNLOAD_CNT = MAX_DOWN;

-- MIN : 데이터의 최소값을 구하는 함수이다.
SELECT MIN(DOWNLOAD_CNT) FROM SSAK3;

SELECT NO, TITLE, DOWNLOAD_CNT FROM (
    SELECT NO, TITLE, DOWNLOAD_CNT, MIN(DOWNLOAD_CNT) OVER(PARTITION BY NO) AS MIN_DOWN
    FROM SSAK3
)
WHERE DOWNLOAD_CNT = MIN_DOWN;

-- AVG : 데이터의 평균값을 구하는 함수이다.

SELECT AVG(DOWNLOAD_CNT) FROM SSAK3;

SELECT NO, AVG(DOWNLOAD_CNT) FROM SSAK3 GROUP BY NO;

SELECT NO, TITLE, ROUND(AVG(DOWNLOAD_CNT) OVER(PARTITION BY NO)) AVG_DOWN FROM SSAK3;

SELECT NO, TITLE, DOWNLOAD_CNT FROM 
(SELECT NO, TITLE, DOWNLOAD_CNT, ROUND(AVG(DOWNLOAD_CNT) OVER(PARTITION BY NO)) AVG_DOWN FROM SSAK3)
WHERE DOWNLOAD_CNT > AVG_DOWN;

SELECT NO, TITLE, DOWNLOAD_CNT, SUM(DOWNLOAD_CNT) OVER(PARTITION BY NO ORDER BY NO ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS S FROM SSAK3;

-- COUNT : 데이터의 건수를 구하는 함수이다.

SELECT ORDER_ITEM, COUNT(*) FROM STARBUCKS_ORDER GROUP BY ORDER_ITEM;

SELECT ORDER_DT, COUNT(*) FROM STARBUCKS_ORDER GROUP BY ORDER_DT;

SELECT ORDER_ITEM, ORDER_DT, COUNT(*) FROM STARBUCKS_ORDER GROUP BY (ORDER_ITEM, ORDER_DT)

SELECT ORDER_ITEM, ORDER_DT, 